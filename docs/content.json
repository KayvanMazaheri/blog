{"meta":{"title":"Nuclear Chiz","subtitle":null,"description":"درباره‌ی چیز‌هایی که به نظرم جالبه می‌نویسم.\nهمینطوری!","author":"Kayvan Mazaheri","url":"http://kmazaheri.ir"},"pages":[{"title":"درباره","date":"2017-12-05T20:42:57.000Z","updated":"2017-12-05T20:50:10.419Z","comments":true,"path":"about/index.html","permalink":"http://kmazaheri.ir/about/index.html","excerpt":"","text":""}],"posts":[{"title":"کد‌های سیبیل دار","slug":"mustached-codes","date":"2017-12-06T07:28:29.000Z","updated":"2017-12-06T14:15:52.678Z","comments":true,"path":"2017/12/06/mustached-codes/","link":"","permalink":"http://kmazaheri.ir/2017/12/06/mustached-codes/","excerpt":"قضیه چیه؟خیلی وقت‌ها توی برنامه‌ای که می‌نویسیم نیاز داریم یک رشته (String) رو، با استفاده از داده‌هایی که الان توی برنامه داریم، بسازیم و برگردونیم، یا حتی فقط چاپشون کنیم.","text":"قضیه چیه؟خیلی وقت‌ها توی برنامه‌ای که می‌نویسیم نیاز داریم یک رشته (String) رو، با استفاده از داده‌هایی که الان توی برنامه داریم، بسازیم و برگردونیم، یا حتی فقط چاپشون کنیم.مثلا توی سایت جدیدتون، می‌خواید بعد از ورود به کاربرتون خوش‌آمد بگید، جوری که مثلا اگه کاربر اسمش کیوان بود بهش بگه سلام،کیوان.نکته مهم اینه که این رشته قراره با اطلاعات اون لحظه‌ی برنامه ساخته بشه (که مثلا توی یه متغیر ذخیره شدن). حالت عادی چی‌کار می‌کردیم خب؟مثلا توی C++ یه همچین حرکتی می‌کردیم:12string msg = \"سلام، \" + user.name;cout &lt;&lt; msg &lt;&lt; endl; توی زبان‌های دیگه هم یه همچین کدی رو راحت می‌شه نوشت و خودتون بهتر از من بلدید. این خوب نیست یعنی؟نه، اصلا !فرض کنید پیامی که قراره چاپ کنیم، به این سادگی نسیت، مثلا قراره بعد از خریدی که کاربر از ساییتون می‌کنه، بهش یک صفحه‌ی فاکتور نشون بدید که توش اسم اقلام خریداری شده، تعدادشون، قیمتشون، جمع قیمت، تخفیف، نام خریدار و هزار تا چیز دیگه رو نشون بدید.مشخصه که یه بخش هایی از این صفحه‌ی فاکتور همیشه ثابته، میتونیم بگیم که صفحه‌ی فاکتور یک قالب خاص داره که توش داده‌های مشتری فعلیتون رو قرار می‌دید و بعد صفحه رو بهش نشون می‌دید. خیلی وقت‌ها، داده‌هایی که به کاربران نشان می‌دهیم از یک قالب مشخص پیروی می‌کنند. واضحه که ساختن این صفحه‌ی فاکتور با استفاده از استراتژی قبلی خیلی راحت نیست. به علاوه‌ی این که کدی که به دست میاد خیلی خوانا نیست و در آینده هم برای تفییرش به احتمال زیاد به مشکل بر‌می‌خوریم.123// Dear Kayvan, you should pay 31$ for buying these 2 items.msg = \"Dear \" + user.name + \", you should pay \" + cart.totalPrice + \"$ for buying these \" + cart.itemCount + \" items.\"; یه ذره بهترش کنیمبرای کار رفع این مشکلات، همیشه ابزار‌هایی ساخته شده‌اند که کار با قالب‌ها رو برای توسعه‌دهنده‌ها راحت کنند. حتی خیلی جاها توی خود زبان‌های برنامه نویسی یه کارایی کردند برای این منظور: C++ &nbsp;[Printf]12printf(\"Dear %s, you should pay %s$ for buying these %d items.\", user.name, cart.totalPrice, cart.itemCount); JavaScript (ES6) &nbsp;[Template Literals]1console.log(`Dear $&#123; user.name &#125;, you should pay $&#123; cart.totalPrice &#125;$ for buying $&#123;cart.itemCount&#125; items.`) Template Systems &amp; Engines نیاز‌های توسعه‌دهنده‌ها معمولا بیشتر از این‌هاست و برای همین Template System ها به وجود اومدند. از Template System های معروف و محبوب میشه به اینا اشاره کرد: Handlebars Mustache Dust (توسط LinkedIn) Nunchuks Pug (که قبلا اسمش Jade بود) کاری که این سیستم‌ها میکنن به صورت خلاصه اینه که شما با یه فرمت مشخص، یه قالب براشون تعریف می‌کنید و بعد هربار که نیاز داشتید، اطلاعاتتون رو به قالب تزریق می‌کنید، همه چیز خیلی راحت دقیقا همون جایی قرار می‌گیره که شما تعریف کردید.این فالب‌ها معمولا خوانا هستند و به کد شما پیچیدگی اضافه نمی‌کنن.معمولا از کد‌های Logic برنامه جدا هستن.تغییرشون در آینده هم کار آسونیه. سیبیل‌ها در کدMustacheیکی از سر‌راست ترین و راحت ترین Templating System هاییه که تا حالا دیدم.کافیه قالبتون رو هرجور که نیاز دارید طراحی کنید، هر جاییش که قراره از مقدار یک متغیر استفاده کنید، می‌تونید از {{ }} استفاده کنید.مثلا: Mustache1Dear &#123;&#123; user.name &#125;&#125;, you should pay &#123;&#123; cart.totalPrice &#125;&#125;$ for buying these &#123;&#123; cart.itemCount &#125;&#125; items. حتی خیلی راحت می‌تونید یه فاکتور HTML درست کنید: Mustache Template for Invoice Page123456789&lt;div class=\"invoice\"&gt; &lt;p&gt;Invoice for &#123;&#123; user.name &#125;&#125;&lt;/p&gt; &lt;ol&gt; &#123;&#123;# cart.items &#125;&#125; &lt;li&gt;&#123;&#123; name &#125;&#125; - &#123;&#123; price &#125;&#125;&lt;/li&gt; &#123;&#123;/ cart.items &#125;&#125; &lt;/ol&gt; &lt;button&gt; Pay &#123;&#123; cart.totalPrice &#125;&#125;$ &lt;/button&gt;&lt;/div&gt; همونطور که توی کد بالا می‌بینید، می‌تونید با استفاده از همین سیبیل‌ها، خیلی راحت حلقه داشته باشید و به ازای تک تک اقلام خریداری شده، یک سطر شامل نام و قیمتش رو توی فاکتور چاپ کنید. اگه برای مثال من قالب بالا رو با اطلاعات سبد خرید کاربری با نام کیوان پر کنم، نتیجش میشه این:اطلاعات سبد خرید کیوان12345678&#123; user: &#123; name: \"Kayvan\" &#125;, cart: &#123; items: [&#123; name: \"sabzi\", price: 200 &#125;, &#123; name: \"goje\", price: 125 &#125;], itemCount: 2, totalPrice : 325 &#125;&#125; خروجی HTML12345678&lt;div class=\"invoice\"&gt; &lt;p&gt;Invoice for Kayvan&lt;/p&gt; &lt;ol&gt; &lt;li&gt;sabzi - 200&lt;/li&gt; &lt;li&gt;goje - 125&lt;/li&gt; &lt;/ol&gt; &lt;button&gt; Pay 325$ &lt;/button&gt;&lt;/div&gt; توی مستنداتش می‌تونید بیشتر دربارش یاد بگیرید، برای خیلی از زبان‌ها هم کتابخونه داره و استفاده ازش خیلی راحته:صفحه اصلی وبسایت Mustacheمستندات Handlebars اینم هست، خیلی شبیه به Mustache ـه در ظاهر، ولی یه تفاوتایی داره مهم‌ترینش شاید اینه که برخلاف Mustache، هدفش این نیست که Logic-less باشه، برای همین مثلا یه سازوکار‌هایی برای چک کردن شرط داره. صفحه اصلی وبسایت Handlebars لینک‌ها اینجا می‌تونید به صورت آنلاین کار با Handlebars و Mustache رو آزمایش کنید. یک راهنمای ساده برای انتخاب Template Engine ( آپدیت نمیشه ) صفحه اصلی وبسایت Mustache صفحه اصلی وبسایت Handlebars","categories":[],"tags":[{"name":"معرفی","slug":"معرفی","permalink":"http://kmazaheri.ir/tags/معرفی/"},{"name":"برنامه نویسی","slug":"برنامه-نویسی","permalink":"http://kmazaheri.ir/tags/برنامه-نویسی/"}]},{"title":"Hexo","slug":"hexo","date":"2017-12-05T21:11:19.000Z","updated":"2017-12-05T22:28:24.072Z","comments":true,"path":"2017/12/06/hexo/","link":"","permalink":"http://kmazaheri.ir/2017/12/06/hexo/","excerpt":"","text":"معرفیHexo یک فریم‌ورک سریع، ساده و قدرتمند برای ایجاد و نگهداری یک وبلاگه. برخلاف سیستم‌های مدیریت محتوایی مثل WordPress، Joomla، Drupal و غیره، Hexo محتوای ایستا ایجاد می‌کنه. یک سری فایل Markdown می‌گیره و از روی اون‌ها ساختار سایت یا وبلاگ رو به همراه فایل های HTML ایجاد می‌کنه. از مزیت های این نوع فریم‌ورک ها که سایت های Static ایجاد می‌کنن، میشه به این اشاره کرد که به راحتی می‌تونین کل سایت یا وبلاگتون رو روی گیت‌هاب بگذارید و خیالتون از بابت میزبانیش راحت باشه. وبلاگی که دارید می‌خونیدش هم با Hexo ساخته شده و توسط GitHub میزبانی می‌شه. برای شروع کار با Hexo بهتره که به سایت رسمیش و مستنداتش سر بزنید. با این حال یه چند تا دستور کاربردیش رو اینجا می‌نویسیم: شروع سریعنصب نصب Hexo هم مثل خیلی دیگه از ابزار‌های نوشته شده با Node.js، از طریق npm خیلی راحته:1npm install -g hexo-cli ایجاد یک پست جدید1$ hexo new \"My New Post\" اطلاعات بیشتر: نوشتن اجرای سرور1$ hexo server اطلاعات بیشتر: سرور ایجاد فایل‌های ثابت1$ hexo generate اطلاعات بیشتر: Generating","categories":[],"tags":[{"name":"معرفی","slug":"معرفی","permalink":"http://kmazaheri.ir/tags/معرفی/"}]},{"title":"سلام دنیا","slug":"hello-world","date":"2017-10-10T06:39:14.000Z","updated":"2017-12-05T23:01:50.065Z","comments":true,"path":"2017/10/10/hello-world/","link":"","permalink":"http://kmazaheri.ir/2017/10/10/hello-world/","excerpt":"","text":"سلام،این یه وبلاگ شخصیه که با استفاده از Hexo ساخته شده. توش احتمالن چیزایی که به نظرم جالب بیاد رو می‌نویسم، پروژه‌های بامزه ای که می‌بینم رو باهاتون به اشتراک می‌ذارم، ابزار‌های خوبی که بهشون بر‌می‌خورم رو معرفی می‌کنم و از این‌جور چیزا. نظری چیزی دارید بگید حتما، خوشحال می‌شم بازخورد بگیرم از چیزایی که می‌نویسم.","categories":[],"tags":[]}]}